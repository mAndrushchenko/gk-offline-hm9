[{"/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/index.js":"1","/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/components/Timer.js":"2","/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/components/Numbers.js":"3","/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/components/Switcher.js":"4"},{"size":329,"mtime":1611931368980,"results":"5","hashOfConfig":"6"},{"size":3260,"mtime":1611931368960,"results":"7","hashOfConfig":"6"},{"size":3157,"mtime":1611932135376,"results":"8","hashOfConfig":"6"},{"size":1507,"mtime":1611931368968,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"10rity0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/index.js",[],["21","22"],"/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/components/Timer.js",["23","24","25"],"import React, {useState, useEffect} from 'react';\nimport '../css/index.css';\nimport styled from 'styled-components'\nimport Numbers from \"./Numbers\";\nimport Switcher from \"./Switcher\";\n\nexport default function Timer () {\n    const [timeZone, setTimeZone] = useState(0);\n    const [timeFrame, setTimeFrame] = useState(24);\n\n    const switchTimeZone = (zone, frame) => {\n        if (zone === 'Kiev') return setTimeZone(0);\n        if (zone === 'NYC') return setTimeZone(-7);\n        if (zone === 'London') return setTimeZone(-2);\n        if (zone === 'Tokyo') return setTimeZone(7);\n        if (zone === 'Moscow') return setTimeZone(1);\n        if (zone === '12|24') return setTimeFrame(frame);\n        return setTimeZone(0);\n    };\n\n    const newDate = () => {\n        const date = new Date();\n        let hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours() + '';\n        hours = hours - 0 + timeZone;\n\n        if (timeFrame === 12) {\n            if (hours > 12) hours = hours - timeFrame;\n        }\n\n        hours < 10 ? hours = '0' + hours : hours = hours + '';\n\n        const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes() + '';\n        const seconds = date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds() + '';\n        return [\n            Number(hours[0]),\n            Number(hours[1]),\n            Number(minutes[0]),\n            Number(minutes[1]),\n            Number(seconds[0]),\n            Number(seconds[1]) ]\n    };\n\n    const firstTime = newDate()\n    const [dozenHour, setDozenHour] = useState(firstTime[0])\n    const [hour, setHour] = useState(firstTime[1])\n    const [dozenMinute, setDozenMinute] = useState(firstTime[2])\n    const [minute, setMinute] = useState(firstTime[3])\n    const [dozenSecond, setDozenSecond] = useState(firstTime[4]);\n    const [second, setSecond] = useState(firstTime[5])\n\n    const renderTime = () => {\n        const newTime = newDate()\n        setDozenHour(newTime[0])\n        setHour(newTime[1])\n        setDozenMinute(newTime[2])\n        setMinute(newTime[3])\n        setDozenSecond(newTime[4])\n        setSecond(newTime[5])\n    }\n\n    useEffect(renderTime, [timeZone, timeFrame])\n\n    useEffect(()=>{\n        const timer =  setInterval(renderTime, 1000);\n        return ()=>{clearInterval(timer)};\n\n    }, [dozenHour, hour,  dozenMinute, minute, dozenSecond, second])\n\n    return (\n        <div className=\"clock\">\n            <div className=\"wrapper-numbers\">\n                <div className=\"hours\">\n                    <Numbers number={dozenHour} maxNumber={2}/>\n                    <Numbers number={hour} maxNumber={3}/>\n                    <div className=\"colon-dots\"><p>:</p></div>\n                </div>\n                <div className=\"minutes\">\n                    <Numbers number={dozenMinute} maxNumber={5}/>\n                    <Numbers number={minute} maxNumber={9}/>\n                    <div className=\"colon-dots\"><p>:</p></div>\n                </div>\n                <div className=\"seconds\">\n                    <Numbers number={dozenSecond} maxNumber={5}/>\n                    <Numbers number={second} maxNumber={9}/>\n                </div>\n            </div>\n            <Switcher onClick={switchTimeZone}/>\n        </div>\n    )\n};\n","/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/components/Numbers.js",["26"],"/home/mikhailo/for-programing/my-projects/geekHub2020/offline/hm9/src/components/Switcher.js",["27","28"],"import React, {useState, useEffect} from 'react';\nimport '../css/index.css';\nimport styled from 'styled-components'\n\n\nexport default function Switcher({onClick}) {\n    const [frame, setFrame] = useState(24)\n    const selectTimeZone = ({target}) => {\n        onClick(target.name)\n    }\n\n    const switchPeriod = ({target}) => {\n        onClick(target.name, frame);\n        frame === 12 ? setFrame(24) : setFrame(12);\n    }\n    return (\n        <div className=\"switcher\">\n            <div className=\"btn-wrapper\">\n                <button name=\"Kiev\" className=\"btn btn-select\" onClick={selectTimeZone}>Kiev</button>\n            </div>\n            <div className=\"btn-wrapper\">\n                <button name=\"NYC\" className=\"btn btn-select\" onClick={selectTimeZone}>New York City</button>\n            </div>\n            <div className=\"btn-wrapper\">\n                <button name=\"London\" className=\"btn btn-select\" onClick={selectTimeZone}>London</button>\n            </div>\n\n            <div className=\"btn-wrapper\">\n                <button name=\"Tokyo\" className=\"btn btn-select\" onClick={selectTimeZone}>Tokyo</button>\n            </div>\n            <div className=\"btn-wrapper\">\n                <button name=\"Moscow\" className=\"btn btn-select\" onClick={selectTimeZone}>Moscow</button>\n            </div>\n            <div className=\"btn-wrapper\">\n                <button name=\"12|24\" className=\"btn switch-timezone\" onClick={switchPeriod}>Switch to {frame}</button>\n            </div>\n        </div>\n    )\n}\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":14},{"ruleId":"37","severity":1,"message":"38","line":61,"column":27,"nodeType":"39","endLine":61,"endColumn":48,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":67,"column":8,"nodeType":"39","endLine":67,"endColumn":68,"suggestions":"42"},{"ruleId":"37","severity":1,"message":"43","line":29,"column":9,"nodeType":"39","endLine":29,"endColumn":28,"suggestions":"44"},{"ruleId":"33","severity":1,"message":"45","line":1,"column":26,"nodeType":"35","messageId":"36","endLine":1,"endColumn":35},{"ruleId":"33","severity":1,"message":"34","line":3,"column":8,"nodeType":"35","messageId":"36","endLine":3,"endColumn":14},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'newDate'. Either include it or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has a missing dependency: 'renderTime'. Either include it or remove the dependency array.",["49"],"React Hook useEffect has a missing dependency: 'weather'. Either include it or remove the dependency array.",["50"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"Update the dependencies array to be: [timeZone, timeFrame, newDate]",{"range":"57","text":"58"},"Update the dependencies array to be: [dozenHour, hour, dozenMinute, minute, dozenSecond, second, renderTime]",{"range":"59","text":"60"},"Update the dependencies array to be: [number, maxNumber, weather]",{"range":"61","text":"62"},[2169,2190],"[timeZone, timeFrame, newDate]",[2318,2378],"[dozenHour, hour, dozenMinute, minute, dozenSecond, second, renderTime]",[952,971],"[number, maxNumber, weather]"]